/*
 * Copyright (c) 2024 CodeFusionBit. All rights reserved.
 * Author: Hitesh Sapra
 *
 * This software is the confidential and proprietary information of CodeFusionBit.
 * You shall not disclose such confidential information and shall use it only in
 * accordance with the terms of the license agreement you entered into with
 * CodeFusionBit.
 *
 * Website: https://codefusionbit.com
 * Contact: info@codefusionbit.com
 */

import 'package:universal_code_viewer/universal_code_viewer.dart';

class UniversalSyntaxHighlighter {
  static final Map<String, RegExp> languagePatterns = {
    'java': RegExp(r'(public\s+class|package\s+[\w\.]+;|import\s+[\w\.]+;)'),
    'python':
    RegExp(r'(def\s+\w+|import\s+\w+|from\s+\w+\s+import|\bclass\s+\w+)'),
    'c': RegExp(r'(#include\s*[<"].*[>"]|int\s+main\s*\([^)]*\))'),
    'cpp': RegExp(r'(#include\s*[<"].*[>"]|namespace\s+\w+|class\s+\w+)'),
    'csharp': RegExp(r'(using\s+[\w\.]+;|namespace\s+[\w\.]+|class\s+\w+)'),
    'javascript': RegExp(r'(const|let|var|function|import\s+.*from|export)'),
    'typescript': RegExp(r'(interface\s+\w+|type\s+\w+|import\s+.*from)'),
    'html': RegExp(r'(<html|<head|<body|<div|<span|<a|<p|<h1|<img|<table)'),
    'css': RegExp(r'(#\w+|.\w+|{\s*|\w+\s*:)'),
    'scss': RegExp(r'(#\w+|.\w+|{\s*|\w+\s*:)'),
    'sass': RegExp(r'(#\w+|.\w+|{\s*|\w+\s*:)'),
    'less': RegExp(r'(#\w+|.\w+|{\s*|\w+\s*:)'),
    'sql': RegExp(r'(SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER)'),
    'shell': RegExp(r'(#!/bin/|function\s+\w+|\$\{\w+\})'),
    'react': RegExp(r'(import\s+.*from|export\s+default|class\s+\w+|function\s+\w+)'),
    'vue': RegExp(r'(import\s+.*from|export\s+default|<template|<script|<style)'),
    'angular': RegExp(r'(import\s+.*from|export\s+default|@Component|@NgModule)'),
    'django': RegExp(r'(from\s+django|from\s+rest_framework|class\s+\w+|def\s+\w+)'),
    'flask': RegExp(r'(from\s+flask|from\s+flask_restful|class\s+\w+|def\s+\w+)'),
    'nodejs': RegExp(r'(const|let|var|function|import\s+.*from|module.exports)'),
    'express': RegExp(r'(const|let|var|function|import\s+.*from|app\..*|router\..*)'),
    'ruby': RegExp(r'(require|module\s+\w+|class\s+\w+|def\s+\w+)'),
    'swift': RegExp(r'(import\s+\w+|class\s+\w+|struct\s+\w+|func\s+\w+)'),
    'go': RegExp(r'(package\s+\w+|import\s+"[^"]+"|func\s+\w+)'),
    'php': RegExp(r'(<\?php|\$\w+|namespace\s+[\w\\]+)'),
    'kotlin': RegExp(r'(fun\s+\w+|class\s+\w+|val\s+\w+|var\s+\w+)'),
    'rust': RegExp(r'(fn\s+\w+|use\s+\w+|struct\s+\w+|impl\s+\w+)'),
    'scala': RegExp(r'(object\s+\w+|class\s+\w+|def\s+\w+|trait\s+\w+)'),
    'perl': RegExp(r'(use\s+\w+|sub\s+\w+|\$\w+|@\w+)'),
    'haskell': RegExp(r'(module\s+\w+|import\s+\w+|data\s+\w+|type\s+\w+)'),
    'r': RegExp(r'(library\s*\(|function\s*\(|\w+\s*<-\s*)'),
    'dart': RegExp(r'(void\s+main|class\s+\w+|import\s+.*package)'),
    'matlab': RegExp(r'(function\s+\w+|^\s*%.*$|^\s*\w+\s*=)'),
    'lua': RegExp(r'(function\s+\w+|local\s+\w+|require\s*\()'),
    'groovy': RegExp(r'(class\s+\w+|def\s+\w+|import\s+\w+)'),
    'objectivec': RegExp(r'(@interface|@implementation|#import)'),
    'bash': RegExp(r'(#!/bin/|function\s+\w+|\$\{\w+\})'),
    'vbnet': RegExp(r'(Imports\s+[\w\.]+|Class\s+\w+|Sub\s+\w+)'),
    'ada': RegExp(r'(procedure\s+\w+|package\s+\w+|with\s+\w+)'),
    'fortran': RegExp(r'(program\s+\w+|subroutine\s+\w+|function\s+\w+)'),
    'lisp': RegExp(r'(\(defun|\(setq|\(let|\(lambda)'),
    'julia': RegExp(r'(function\s+\w+|module\s+\w+|using\s+\w+)'),
    'fsharp': RegExp(r'(let\s+\w+|module\s+\w+|type\s+\w+)'),
    'erlang': RegExp(r'(-module\(|-export\(|-record\()'),
    'elixir': RegExp(r'(defmodule|def\s+\w+|@\w+)'),
    'clojure': RegExp(r'(\(ns\s+\w+|\(defn\s+\w+|\(def\s+\w+)'),
    'elm': RegExp(r'(module\s+\w+|import\s+\w+|type\s+\w+)'),
    'smalltalk': RegExp(r'(\w+\s+class|\w+\s+new|\w+\s+at:)'),
    'cobol':
    RegExp(r'(IDENTIFICATION\s+DIVISION|PROGRAM-ID|PROCEDURE\s+DIVISION)'),
    'pascal': RegExp(r'(program\s+\w+|procedure\s+\w+|function\s+\w+)'),
    'scheme': RegExp(r'(\(define|\(lambda|\(let)'),
    'prolog': RegExp(r'(:-\s*\w+|consult\(|assert\()'),
    'actionscript': RegExp(r'(package\s+\w+|class\s+\w+|function\s+\w+)'),
    'assembly': RegExp(r'(section\s+\.\w+|global\s+\w+|\w+:)'),
    'apex': RegExp(r'(public\s+class|@\w+|trigger\s+\w+)'),
    'tcl': RegExp(r'(proc\s+\w+|namespace\s+eval|package\s+require)'),
    'plsql': RegExp(r'(CREATE\s+OR\s+REPLACE|PROCEDURE\s+\w+|PACKAGE\s+\w+)'),
    'vhdl': RegExp(r'(entity\s+\w+|architecture\s+\w+|process\s*\()'),
    'verilog': RegExp(r'(module\s+\w+|always\s+@|reg\s+\w+)'),
    'abap': RegExp(r'(REPORT\s+\w+|CLASS\s+\w+|METHOD\s+\w+)'),
    'd': RegExp(r'(module\s+\w+|class\s+\w+|void\s+\w+)'),
    'awk': RegExp(r'(BEGIN|END|\$\d+|/pattern/)'),
    'sed': RegExp(r'(^[0-9]+|[adips]|{|\})'),
    'simula': RegExp(r'(class\s+\w+|procedure\s+\w+|inspect)'),
  };

  static const Map<String, Set<String>> keywords = {
    'java': {
      'abstract',
      'assert',
      'boolean',
      'break',
      'byte',
      'case',
      'catch',
      'char',
      'class',
      'const',
      'continue',
      'default',
      'do',
      'double',
      'else',
      'enum',
      'extends',
      'final',
      'finally',
      'float',
      'for',
      'if',
      'implements',
      'import',
      'instanceof',
      'int',
      'interface',
      'long',
      'native',
      'new',
      'package',
      'private',
      'protected',
      'public',
      'return',
      'short',
      'static',
      'strictfp',
      'super',
      'switch',
      'synchronized',
      'this',
      'throw',
      'throws',
      'transient',
      'try',
      'void',
      'volatile',
      'while',
      'true',
      'false',
      'null',
      'var',
      'record',
      'sealed',
      'permits',
      'non-sealed',
      'with',
      'module',
      'requires',
      'exports',
      'opens',
      'to',
      'uses',
      'pro',
      'vides',
      'transitive',
      'goto',
      'yield',
      'async',
      'await',
    },
    'python': {
      'False',
      'None',
      'True',
      'and',
      'as',
      'assert',
      'async',
      'await',
      'break',
      'class',
      'continue',
      'def',
      'del',
      'elif',
      'else',
      'except',
      'finally',
      'for',
      'from',
      'global',
      'if',
      'import',
      'in',
      'is',
      'lambda',
      'nonlocal',
      'not',
      'or',
      'pass',
      'raise',
      'return',
      'try',
      'while',
      'with',
      'yield',
    },
    'c': {
      'auto',
      'break',
      'case',
      'char',
      'const',
      'continue',
      'default',
      'do',
      'double',
      'else',
      'enum',
      'extern',
      'float',
      'for',
      'goto',
      'if',
      'inline',
      'int',
      'long',
      'register',
      'restrict',
      'return',
      'short',
      'signed',
      'sizeof',
      'static',
      'struct',
      'switch',
      'typedef',
      'union',
      'unsigned',
      'void',
      'volatile',
      'while'
    },
    'cpp': {
      'alignas',
      'alignof',
      'and',
      'and_eq',
      'asm',
      'auto',
      'bitand',
      'bitor',
      'bool',
      'break',
      'case',
      'catch',
      'char',
      'char16_t',
      'char32_t',
      'class',
      'compl',
      'const',
      'constexpr',
      'const_cast',
      'continue',
      'decltype',
      'default',
      'delete',
      'do',
      'double',
      'dynamic_cast',
      'else',
      'enum',
      'explicit',
      'export',
      'extern',
      'false',
      'float',
      'for',
      'friend',
      'goto',
      'if',
      'inline',
      'int',
      'long',
      'mutable',
      'namespace',
      'new',
      'noexcept',
      'not',
      'not_eq',
      'nullptr',
      'operator',
      'or',
      'or_eq',
      'private',
      'protected',
      'public',
      'register',
      'reinterpret_cast',
      'return',
      'short',
      'signed',
      'sizeof',
      'static',
      'static_assert',
      'static_cast',
      'struct',
      'switch',
      'template',
      'this',
      'thread_local',
      'throw',
      'true',
      'try',
      'typedef',
      'typeid',
      'typename',
      'union',
      'unsigned',
      'using',
      'virtual',
      'void',
      'volatile',
      'wchar_t',
      'while',
      'xor',
      'xor_eq'
    },
    'javascript': {
      'abstract',
      'arguments',
      'await',
      'boolean',
      'break',
      'byte',
      'case',
      'catch',
      'char',
      'class',
      'const',
      'continue',
      'debugger',
      'default',
      'delete',
      'do',
      'double',
      'else',
      'enum',
      'eval',
      'export',
      'extends',
      'false',
      'final',
      'finally',
      'float',
      'for',
      'function',
      'goto',
      'if',
      'implements',
      'import',
      'in',
      'instanceof',
      'int',
      'interface',
      'let',
      'long',
      'native',
      'new',
      'null',
      'package',
      'private',
      'protected',
      'public',
      'return',
      'short',
      'static',
      'super',
      'switch',
      'synchronized',
      'this',
      'throw',
      'throws',
      'transient',
      'true',
      'try',
      'typeof',
      'var',
      'void',
      'volatile',
      'while',
      'with',
      'yield'
    },
    // Swift
    'swift': {
      'associatedtype',
      'class',
      'deinit',
      'enum',
      'extension',
      'fileprivate',
      'func',
      'import',
      'init',
      'inout',
      'internal',
      'let',
      'open',
      'operator',
      'private',
      'protocol',
      'public',
      'rethrows',
      'static',
      'struct',
      'subscript',
      'typealias',
      'var',
      'break',
      'case',
      'continue',
      'default',
      'defer',
      'do',
      'else',
      'fallthrough',
      'for',
      'guard',
      'if',
      'in',
      'repeat',
      'return',
      'switch',
      'where',
      'while',
      'as',
      'any',
      'catch',
      'false',
      'is',
      'nil',
      'super',
      'self',
      'Self',
      'throw',
      'throws',
      'true',
      'try'
    },
    // Go
    'go': {
      'break',
      'case',
      'chan',
      'const',
      'continue',
      'default',
      'defer',
      'else',
      'fallthrough',
      'for',
      'func',
      'go',
      'goto',
      'if',
      'import',
      'interface',
      'map',
      'package',
      'range',
      'return',
      'select',
      'struct',
      'switch',
      'type',
      'var'
    },
    // Kotlin
    'kotlin': {
      'as',
      'break',
      'class',
      'continue',
      'do',
      'else',
      'false',
      'for',
      'fun',
      'if',
      'in',
      'interface',
      'is',
      'null',
      'object',
      'package',
      'return',
      'super',
      'this',
      'throw',
      'true',
      'try',
      'typealias',
      'typeof',
      'val',
      'var',
      'when',
      'while'
    },
    // Rust
    'rust': {
      'as',
      'break',
      'const',
      'continue',
      'crate',
      'else',
      'enum',
      'extern',
      'false',
      'fn',
      'for',
      'if',
      'impl',
      'in',
      'let',
      'loop',
      'match',
      'mod',
      'move',
      'mut',
      'pub',
      'ref',
      'return',
      'self',
      'Self',
      'static',
      'struct',
      'super',
      'trait',
      'true',
      'type',
      'unsafe',
      'use',
      'where',
      'while',
      'async',
      'await',
      'dyn'
    },
    // PHP
    'php': {
      'abstract',
      'and',
      'array',
      'as',
      'break',
      'callable',
      'case',
      'catch',
      'class',
      'clone',
      'const',
      'continue',
      'declare',
      'default',
      'do',
      'echo',
      'else',
      'elseif',
      'empty',
      'enddeclare',
      'endfor',
      'endforeach',
      'endif',
      'endswitch',
      'endwhile',
      'eval',
      'exit',
      'extends',
      'final',
      'finally',
      'for',
      'foreach',
      'function',
      'global',
      'goto',
      'if',
      'implements',
      'include',
      'include_once',
      'instanceof',
      'insteadof',
      'interface',
      'isset',
      'list',
      'namespace',
      'new',
      'or',
      'print',
      'private',
      'protected',
      'public',
      'require',
      'require_once',
      'return',
      'static',
      'switch',
      'throw',
      'trait',
      'try',
      'unset',
      'use',
      'var',
      'while',
      'xor',
      'yield'
    },

    // Ruby
    'ruby': {
      'BEGIN',
      'END',
      'alias',
      'and',
      'begin',
      'break',
      'case',
      'class',
      'def',
      'defined',
      'do',
      'else',
      'elsif',
      'end',
      'ensure',
      'false',
      'for',
      'if',
      'in',
      'module',
      'next',
      'nil',
      'not',
      'or',
      'redo',
      'rescue',
      'retry',
      'return',
      'self',
      'super',
      'then',
      'true',
      'undef',
      'unless',
      'until',
      'when',
      'while',
      'yield'
    },

    // Perl
    'perl': {
      'continue',
      'do',
      'else',
      'elsif',
      'for',
      'foreach',
      'if',
      'last',
      'my',
      'next',
      'no',
      'our',
      'package',
      'redo',
      'require',
      'sub',
      'unless',
      'until',
      'use',
      'while'
    },

    // Haskell
    'haskell': {
      'case',
      'class',
      'data',
      'default',
      'deriving',
      'do',
      'else',
      'if',
      'import',
      'in',
      'infix',
      'infixl',
      'infixr',
      'instance',
      'let',
      'module',
      'newtype',
      'of',
      'then',
      'type',
      'where',
      '_'
    },

    // R
    'r': {
      'break',
      'else',
      'for',
      'function',
      'if',
      'in',
      'next',
      'repeat',
      'while'
    },

    // Dart
    'dart': {
      'abstract',
      'as',
      'assert',
      'async',
      'await',
      'break',
      'case',
      'catch',
      'class',
      'const',
      'continue',
      'default',
      'deferred',
      'do',
      'dynamic',
      'else',
      'enum',
      'export',
      'extends',
      'extension',
      'external',
      'factory',
      'false',
      'final',
      'finally',
      'for',
      'Function',
      'get',
      'hide',
      'if',
      'implements',
      'import',
      'in',
      'interface',
      'is',
      'library',
      'mixin',
      'new',
      'null',
      'on',
      'operator',
      'part',
      'required',
      'rethrow',
      'return',
      'set',
      'show',
      'static',
      'super',
      'switch',
      'sync',
      'this',
      'throw',
      'true',
      'try',
      'typedef',
      'var',
      'void',
      'while',
      'with',
      'yield'
    },

    // Objective-C
    'objectivec': {
      '@interface',
      '@implementation',
      '@end',
      '@autoreleasepool',
      '@catch',
      '@class',
      '@dynamic',
      '@encode',
      '@finally',
      '@import',
      '@package',
      '@protocol',
      '@optional',
      '@private',
      '@protected',
      '@public',
      '@property',
      '@required',
      '@selector',
      '@synchronized',
      '@synthesize',
      '@throw',
      '@try',
      'NO',
      'NULL',
      'YES',
      'auto',
      'break',
      'case',
      'char',
      'const',
      'continue',
      'default',
      'do',
      'double',
      'else',
      'enum',
      'extern',
      'float',
      'for',
      'goto',
      'if',
      'inline',
      'int',
      'long',
      'register',
      'restrict',
      'return',
      'short',
      'signed',
      'sizeof',
      'static',
      'struct',
      'switch',
      'typedef',
      'union',
      'unsigned',
      'void',
      'volatile',
      'while'
    },

    // Bash
    'bash': {
      'alias',
      'bg',
      'bind',
      'break',
      'builtin',
      'caller',
      'case',
      'cd',
      'command',
      'compgen',
      'complete',
      'continue',
      'declare',
      'dirs',
      'disown',
      'echo',
      'enable',
      'eval',
      'exec',
      'exit',
      'export',
      'false',
      'fc',
      'fg',
      'getopts',
      'hash',
      'help',
      'history',
      'if',
      'jobs',
      'kill',
      'let',
      'local',
      'logout',
      'mapfile',
      'popd',
      'printf',
      'pushd',
      'pwd',
      'read',
      'readarray',
      'readonly',
      'return',
      'set',
      'shift',
      'shopt',
      'source',
      'suspend',
      'test',
      'times',
      'trap',
      'true',
      'type',
      'typeset',
      'ulimit',
      'umask',
      'unalias',
      'unset',
      'until',
      'wait',
      'while'
    },
// VB.NET
    'vbnet': {
      'AddHandler',
      'AddressOf',
      'Alias',
      'And',
      'AndAlso',
      'As',
      'Boolean',
      'ByRef',
      'Byte',
      'ByVal',
      'Call',
      'Case',
      'Catch',
      'CBool',
      'CByte',
      'CChar',
      'CDate',
      'CDbl',
      'CDec',
      'Char',
      'CInt',
      'Class',
      'CLng',
      'CObj',
      'Const',
      'Continue',
      'CSByte',
      'CShort',
      'CSng',
      'CStr',
      'CType',
      'CUInt',
      'CULng',
      'CUShort',
      'Date',
      'Decimal',
      'Declare',
      'Default',
      'Delegate',
      'Dim',
      'DirectCast',
      'Do',
      'Double',
      'Each',
      'Else',
      'ElseIf',
      'End',
      'Enum',
      'Erase',
      'Error',
      'Event',
      'Exit',
      'False',
      'Finally',
      'For',
      'Friend',
      'Function',
      'Get',
      'GetType',
      'GetXMLNamespace',
      'Global',
      'GoTo',
      'Handles',
      'If',
      'Implements',
      'Imports',
      'In',
      'Inherits',
      'Integer',
      'Interface',
      'Is',
      'IsNot',
      'Let',
      'Lib',
      'Like',
      'Long',
      'Loop',
      'Me',
      'Mod',
      'Module',
      'MustInherit',
      'MustOverride',
      'MyBase',
      'MyClass',
      'Namespace',
      'Narrowing',
      'New',
      'Next',
      'Not',
      'Nothing',
      'NotInheritable',
      'NotOverridable',
      'Object',
      'Of',
      'On',
      'Operator',
      'Option',
      'Optional',
      'Or',
      'OrElse',
      'Out',
      'Overloads',
      'Overridable',
      'Overrides',
      'ParamArray',
      'Partial',
      'Private',
      'Property',
      'Protected',
      'Public',
      'RaiseEvent',
      'ReadOnly',
      'ReDim',
      'REM',
      'RemoveHandler',
      'Resume',
      'Return',
      'SByte',
      'Select',
      'Set',
      'Shadows',
      'Shared',
      'Short',
      'Single',
      'Static',
      'Step',
      'Stop',
      'String',
      'Structure',
      'Sub',
      'SyncLock',
      'Then',
      'Throw',
      'To',
      'True',
      'Try',
      'TryCast',
      'TypeOf',
      'UInteger',
      'ULong',
      'UShort',
      'Using',
      'Variant',
      'Wend',
      'When',
      'While',
      'Widening',
      'With',
      'WithEvents',
      'WriteOnly',
      'Xor'
    },

    // SQL
    'sql': {
      'ADD',
      'ALL',
      'ALTER',
      'AND',
      'ANY',
      'AS',
      'ASC',
      'BACKUP',
      'BETWEEN',
      'CASE',
      'CHECK',
      'COLUMN',
      'CONSTRAINT',
      'CREATE',
      'DATABASE',
      'DEFAULT',
      'DELETE',
      'DESC',
      'DISTINCT',
      'DROP',
      'EXEC',
      'EXISTS',
      'FOREIGN',
      'FROM',
      'FULL',
      'GROUP',
      'HAVING',
      'IN',
      'INDEX',
      'INNER',
      'INSERT',
      'IS',
      'JOIN',
      'KEY',
      'LEFT',
      'LIKE',
      'LIMIT',
      'NOT',
      'NULL',
      'OR',
      'ORDER',
      'OUTER',
      'PRIMARY',
      'PROCEDURE',
      'RIGHT',
      'ROWNUM',
      'SELECT',
      'SET',
      'TABLE',
      'TOP',
      'TRUNCATE',
      'UNION',
      'UNIQUE',
      'UPDATE',
      'VALUES',
      'VIEW',
      'WHERE'
    },

    // PL/SQL
    'plsql': {
      'ABORT',
      'ACCEPT',
      'ACCESS',
      'ADD',
      'ALL',
      'ALTER',
      'AND',
      'ANY',
      'ARRAY',
      'AS',
      'ASC',
      'ASSERT',
      'ASSIGN',
      'AT',
      'AUTHORIZATION',
      'AVG',
      'BEGIN',
      'BETWEEN',
      'BODY',
      'BOOLEAN',
      'BY',
      'CASE',
      'CHAR',
      'CHAR_BASE',
      'CHECK',
      'CLOSE',
      'CLUSTER',
      'CLUSTERS',
      'COBOL',
      'COLAUTH',
      'COLUMN',
      'COMMENT',
      'COMMIT',
      'COMPRESS',
      'CONNECT',
      'CONSTANT',
      'CRASH',
      'CREATE',
      'CURRENT',
      'CURSOR',
      'DATABASE',
      'DATA_BASE',
      'DATE',
      'DBA',
      'DEBUGOFF',
      'DEBUGON',
      'DECLARE',
      'DECIMAL',
      'DEFAULT',
      'DEFINITION',
      'DELAY',
      'DELETE',
      'DELTA',
      'DESC',
      'DIGITS',
      'DISPOSE',
      'DISTINCT',
      'DO',
      'DROP',
      'ELSE',
      'ELSIF',
      'END',
      'ENTRY',
      'EXCEPTION',
      'EXCLUSIVE',
      'EXEC',
      'EXIT',
      'FALSE',
      'FETCH',
      'FILE',
      'FLOAT',
      'FOR',
      'FORM',
      'FROM',
      'FUNCTION',
      'GENERIC',
      'GOTO',
      'GRANT',
      'GROUP',
      'HAVING',
      'IDENTIFIED',
      'IF',
      'IN',
      'INDEX',
      'INDEXES',
      'INDICATOR',
      'INSERT',
      'INTEGER',
      'INTERFACE',
      'INTERSECT',
      'INTO',
      'IS',
      'LEVEL',
      'LIKE',
      'LIMITED',
      'LOCK',
      'LONG',
      'LOOP',
      'MAX',
      'MIN',
      'MINUS',
      'MISLABEL',
      'MOD',
      'MODE',
      'NATURAL',
      'NATURALN',
      'NEW',
      'NEXTVAL',
      'NOAUDIT',
      'NOCOMPRESS',
      'NOT',
      'NOWAIT',
      'NULL',
      'NUMBER',
      'NUMBER_BASE',
      'OF',
      'OFFLINE',
      'ON',
      'ONLINE',
      'OPEN',
      'OPTION',
      'OR',
      'ORDER',
      'OTHERS',
      'OUT',
      'PACKAGE',
      'PARTITION',
      'PCTFREE',
      'PLS_INTEGER',
      'POSITIVE',
      'POSITIVEN',
      'PRAGMA',
      'PRECISION',
      'PRIMARY',
      'PRIOR',
      'PRIVATE',
      'PRIVILEGES',
      'PROCEDURE',
      'PUBLIC',
      'RAISE',
      'RANGE',
      'RAW',
      'READ',
      'REAL',
      'RECORD',
      'REF',
      'RELEASE',
      'RETURN',
      'REVERSE',
      'REVOKE',
      'ROLLBACK',
      'ROW',
      'ROWID',
      'ROWLABEL',
      'ROWNUM',
      'ROWS',
      'ROWTYPE',
      'RUN',
      'SAVEPOINT',
      'SCHEMA',
      'SELECT',
      'SEPARATE',
      'SESSION',
      'SET',
      'SHARE',
      'SMALLINT',
      'SPACE',
      'SQL',
      'SQLCODE',
      'SQLERRM',
      'START',
      'STATEMENT',
      'STDDEV',
      'SUBTYPE',
      'SUCCESSFUL',
      'SUM',
      'SYNONYM',
      'SYSDATE',
      'TABAUTH',
      'TABLE',
      'TABLES',
      'TASK',
      'TERMINATE',
      'THEN',
      'TO',
      'TRIGGER',
      'TRUE',
      'TYPE',
      'UID',
      'UNION',
      'UNIQUE',
      'UPDATE',
      'USE',
      'USER',
      'VALIDATE',
      'VALUES',
      'VARCHAR',
      'VARCHAR2',
      'VARIANCE',
      'VIEW',
      'VIEWS',
      'WHEN',
      'WHENEVER',
      'WHERE',
      'WHILE',
      'WITH',
      'WORK',
      'WRITE',
      'XOR',
      'YEAR'
    },
    // Ada
    'ada': {
      'abort',
      'abs',
      'abstract',
      'accept',
      'access',
      'aliased',
      'all',
      'and',
      'array',
      'at',
      'begin',
      'body',
      'case',
      'constant',
      'declare',
      'delay',
      'delta',
      'digits',
      'do',
      'else',
      'elsif',
      'end',
      'entry',
      'exception',
      'exit',
      'for',
      'function',
      'generic',
      'goto',
      'if',
      'in',
      'interface',
      'is',
      'limited',
      'loop',
      'mod',
      'new',
      'not',
      'null',
      'of',
      'or',
      'others',
      'out',
      'overriding',
      'package',
      'pragma',
      'private',
      'procedure',
      'protected',
      'raise',
      'range',
      'record',
      'rem',
      'renames',
      'requeue',
      'return',
      'reverse',
      'select',
      'separate',
      'some',
      'subtype',
      'synchronized',
      'tagged',
      'task',
      'terminate',
      'then',
      'type',
      'until',
      'use',
      'when',
      'while',
      'with',
      'xor'
    },

    // Fortran
    'fortran': {
      'abstract',
      'allocatable',
      'allocate',
      'assign',
      'assignment',
      'associate',
      'asynchronous',
      'backspace',
      'bind',
      'block',
      'blockdata',
      'call',
      'case',
      'class',
      'close',
      'common',
      'contains',
      'continue',
      'cycle',
      'data',
      'deallocate',
      'deferred',
      'dimension',
      'do',
      'elemental',
      'else',
      'elseif',
      'end',
      'endif',
      'entry',
      'enum',
      'enumerator',
      'equivalence',
      'exit',
      'extends',
      'external',
      'final',
      'flush',
      'forall',
      'function',
      'generic',
      'goto',
      'if',
      'implicit',
      'import',
      'in',
      'include',
      'inout',
      'intent',
      'interface',
      'intrinsic',
      'kind',
      'len',
      'local',
      'module',
      'namelist',
      'none',
      'nullify',
      'only',
      'open',
      'operator',
      'optional',
      'out',
      'parameter',
      'pass',
      'pause',
      'pointer',
      'precision',
      'print',
      'private',
      'procedure',
      'program',
      'public',
      'pure',
      'read',
      'recursive',
      'result',
      'return',
      'rewind',
      'save',
      'select',
      'sequence',
      'stop',
      'submodule',
      'subroutine',
      'target',
      'then',
      'to',
      'type',
      'use',
      'value',
      'volatile',
      'wait',
      'where',
      'while',
      'write'
    },

    // Lisp
    'lisp': {
      'and',
      'block',
      'case',
      'catch',
      'class',
      'cond',
      'defclass',
      'defconstant',
      'defgeneric',
      'define-compiler-macro',
      'define-condition',
      'define-method-combination',
      'define-modify-macro',
      'define-setf-expander',
      'define-symbol-macro',
      'defmacro',
      'defmethod',
      'defpackage',
      'defparameter',
      'defsetf',
      'defstruct',
      'deftype',
      'defun',
      'defvar',
      'do',
      'do*',
      'dolist',
      'dotimes',
      'ecase',
      'etypecase',
      'eval-when',
      'flet',
      'formatter',
      'function',
      'go',
      'if',
      'ignore-errors',
      'in-package',
      'labels',
      'lambda',
      'let',
      'let*',
      'locally',
      'loop',
      'macrolet',
      'multiple-value-bind',
      'multiple-value-call',
      'multiple-value-prog1',
      'or',
      'prog',
      'prog*',
      'progn',
      'prog1',
      'progv',
      'provide',
      'require',
      'return',
      'return-from',
      'setq',
      'symbol-macrolet',
      'tagbody',
      'the',
      'throw',
      'typecase',
      'unless',
      'unwind-protect',
      'use-package',
      'when'
    },

    // Julia
    'julia': {
      'abstract',
      'baremodule',
      'begin',
      'break',
      'catch',
      'const',
      'continue',
      'do',
      'else',
      'elseif',
      'end',
      'export',
      'false',
      'finally',
      'for',
      'function',
      'global',
      'if',
      'import',
      'importall',
      'in',
      'let',
      'local',
      'macro',
      'module',
      'quote',
      'return',
      'struct',
      'true',
      'try',
      'type',
      'typealias',
      'using',
      'var',
      'where',
      'while'
    },

    // Elixir
    'elixir': {
      'alias',
      'case',
      'catch',
      'cond',
      'def',
      'defdelegate',
      'defexception',
      'defimpl',
      'defmacro',
      'defmacrop',
      'defmodule',
      'defp',
      'defprotocol',
      'defstruct',
      'do',
      'else',
      'end',
      'fn',
      'for',
      'if',
      'import',
      'in',
      'quote',
      'raise',
      'receive',
      'require',
      'rescue',
      'super',
      'throw',
      'try',
      'unless',
      'unquote',
      'unquote_splicing',
      'use',
      'when'
    },

    // Clojure
    'clojure': {
      'def',
      'def-',
      'defn',
      'defn-',
      'defmacro',
      'defmulti',
      'defmethod',
      'defstruct',
      'defonce',
      'declare',
      'defprotocol',
      'defrecord',
      'deftype',
      'definterface',
      'defproject',
      'defsystem',
      'defemitter',
      'defsink',
      'defflow',
      'defstate',
      'defui',
      'defmutation',
      'do',
      'doto',
      'dotimes',
      'doseq',
      'dosync',
      'dorun',
      'doall',
      'delay',
      'delay?',
      'atom',
      'atom?',
      'future',
      'future?',
      'promise',
      'promise?',
      'let',
      'letfn',
      'if',
      'if-not',
      'if-let',
      'when',
      'when-not',
      'when-let',
      'when-first',
      'case',
      'cond',
      'cond->',
      'cond->>',
      'condp',
      'for',
      'comment',
      'loop',
      'recur',
      'throw',
      'try',
      'catch',
      'finally',
      'monitor-enter',
      'monitor-exit',
      'quote',
      'var',
      'var-get',
      'var-set',
      'binding',
      'bound-fn',
      'fn',
      'proxy',
      'memfn',
      'struct',
      'struct-map',
      'sync',
      'with-in-str',
      'with-local-vars',
      'with-open',
      'with-out-str',
      'with-precision',
      'with-redefs',
      'require',
      'import',
      'refer',
      'use',
      'load',
      'load-file',
      'load-string',
      'loaded-libs',
      'compile',
      'inst?',
      'inst-ms',
      'io!',
      'new',
      'and',
      'or',
      'not',
      'identical?',
      'not-empty',
      'not-every?',
      'not-any?',
      'slurp',
      'spit',
      'print',
      'prn',
      'println',
      'printf',
      'format',
      'apply',
      'partial',
      'comp',
      'memoize',
      'constantly',
      'complement',
      'every-pred',
      'some-fn',
      'assert',
      'assert-args',
      'assert-predicate',
      'assert-expr',
      'assert-false',
      'assert-not',
      'assert-nil',
      'assert-not-nil',
      'meta',
      'with-meta',
      'vary-meta',
      'alter-meta!',
      'reset-meta!',
      'add-watch',
      'remove-watch',
      'get-validator',
      'set-validator!',
      'alter-var-root',
      'intern',
      'find-var',
      'ns-resolve',
      'resolve',
      're-find',
      're-seq',
      're-matches',
      're-pattern',
      're-matcher',
      're-groups',
      're-group'
    },

    // Elm
    'elm': {
      'case',
      'of',
      'if',
      'then',
      'else',
      'let',
      'in',
      'type',
      'module',
      'where',
      'import',
      'exposing',
      'as',
      'port',
      'primitive'
    },

    // Smalltalk
    'smalltalk': {
      'self',
      'super',
      'true',
      'false',
      'nil',
      'thisContext',
      'new',
      'ifTrue:',
      'ifFalse:',
      'whileTrue:',
      'whileFalse:',
      'and',
      'or',
      'not',
      'isNil',
      'isNotNil',
      'class'
    },

    // COBOL
    'cobol': {
      'ACCEPT',
      'ACCESS',
      'ADD',
      'ADDRESS',
      'ADVANCING',
      'AFTER',
      'ALL',
      'ALPHABET',
      'ALPHABETIC',
      'ALPHABETIC-LOWER',
      'ALPHABETIC-UPPER',
      'ALPHANUMERIC',
      'ALPHANUMERIC-EDITED',
      'ALSO',
      'ALTER',
      'ALTERNATE',
      'AND',
      'ANY',
      'APPLY',
      'ARE',
      'AREA',
      'AREAS',
      'AS',
      'ASCENDING',
      'ASSIGN',
      'AT',
      'AUTHOR',
      'BEFORE',
      'BEGINNING',
      'BINARY',
      'BLANK',
      'BLOCK',
      'BOTTOM',
      'BY',
      'CALL',
      'CANCEL',
      'CBL',
      'CD',
      'CF',
      'CH',
      'CHARACTER',
      'CHARACTERS',
      'CLASS',
      'CLOCK-UNITS',
      'CLOSE',
      'COBOL',
      'CODE',
      'CODE-SET',
      'COLLATING',
      'COLUMN',
      'COMMA',
      'COMMIT',
      'COMMON',
      'COMMUNICATION',
      'COMP',
      'COMP-1',
      'COMP-2',
      'COMP-3',
      'COMP-4',
      'COMP-5',
      'COMPUTATIONAL',
      'COMPUTATIONAL-1',
      'COMPUTATIONAL-2',
      'COMPUTATIONAL-3',
      'COMPUTATIONAL-4',
      'COMPUTATIONAL-5',
      'COMPUTE',
      'CONFIGURATION',
      'CONTAINS',
      'CONTENT',
      'CONTINUE',
      'CONTROL',
      'CONTROLS',
      'CONVERTING',
      'COPY',
      'CORR',
      'CORRESPONDING',
      'COUNT',
      'CURRENCY',
      'DATA',
      'DATE',
      'DATE-COMPILED',
      'DATE-WRITTEN',
      'DAY',
      'DAY-OF-WEEK',
      'DE',
      'DEBUG',
      'DEBUGGING',
      'DECIMAL-POINT',
      'DECLARATIVES',
      'DELETE',
      'DELIMITED',
      'DELIMITER',
      'DEPENDING',
      'DESCENDING',
      'DESTINATION',
      'DETAIL',
      'DISPLAY',
      'DIVIDE',
      'DIVISION',
      'DOWN',
      'DUPLICATES',
      'DYNAMIC',
      'EGI',
      'ELSE',
      'EMI',
      'ENABLE',
      'END',
      'END-ADD',
      'END-CALL',
      'END-COMPUTE',
      'END-DELETE',
      'END-DIVIDE',
      'END-EVALUATE',
      'END-IF',
      'END-MULTIPLY',
      'END-OF-PAGE',
      'END-PERFORM',
      'END-READ',
      'END-RECEIVE',
      'END-RETURN',
      'END-REWRITE',
      'END-SEARCH',
      'END-START',
      'END-STRING',
      'END-SUBTRACT',
      'END-UNSTRING',
      'END-WRITE',
      'ENDING',
      'ENTER',
      'ENTRY',
      'ENVIRONMENT',
      'EOP',
      'EQUAL',
      'ERROR',
      'ESI',
      'EVALUATE',
      'EVERY',
      'EXCEPTION',
      'EXCLUSIVE',
      'EXIT',
      'EXTEND',
      'EXTERNAL',
      'FALSE',
      'FD',
      'FILE',
      'FILE-CONTROL',
      'FILLER',
      'FINAL',
      'FIRST',
      'FOOTING',
      'FOR',
      'FROM',
      'FUNCTION',
      'GENERATE',
      'GIVING',
      'GLOBAL',
      'GO',
      'GREATER',
      'GROUP',
      'HEADING',
      'HIGH-VALUE',
      'HIGH-VALUES',
      'I-O',
      'I-O-CONTROL',
      'ID',
      'IDENTIFICATION',
      'IF',
      'IN',
      'INDEX',
      'INDEXED',
      'INDICATE',
      'INHERITS',
      'INITIAL',
      'INITIALIZE',
      'INITIATE',
      'INPUT',
      'INPUT-OUTPUT',
      'INSPECT',
      'INSTALLATION',
      'INTO',
      'INVALID',
      'IS',
      'JUST',
      'JUSTIFIED',
      'KEY',
      'LABEL',
      'LAST',
      'LEADING',
      'LEFT',
      'LENGTH',
      'LESS',
      'LIMIT',
      'LIMITS',
      'LINAGE',
      'LINAGE-COUNTER',
      'LINE',
      'LINES',
      'LINKAGE',
      'LOCAL-STORAGE',
      'LOCK',
      'LOW-VALUE',
      'LOW-VALUES',
      'MEMORY',
      'MERGE',
      'MESSAGE',
      'MMDDYYYY',
      'MODE',
      'MODULES',
      'MOVE',
      'MULTIPLE',
      'MULTIPLY',
      'NATIONAL',
      'NATIONAL-EDITED',
      'NATIVE',
      'NEGATIVE',
      'NEXT',
      'NO',
      'NOT',
      'NULL',
      'NULLS',
      'NUMBER',
      'NUMERIC',
      'NUMERIC-EDITED',
      'OBJECT-COMPUTER',
      'OCCURS',
      'OF',
      'OFF',
      'OMITTED',
      'ON',
      'OPEN',
      'OPTIONAL',
      'OR',
      'ORDER',
      'ORGANIZATION',
      'OTHER',
      'OUTPUT',
      'OVERFLOW',
      'OVERLINE',
      'OWN',
      'PACKED-DECIMAL',
      'PADDING',
      'PAGE',
      'PAGE-COUNTER',
      'PERFORM',
      'PIC',
      'PICTURE',
      'PLUS',
      'POINTER',
      'POSITION',
      'POSITIVE',
      'PRINTING',
      'PROCEDURE',
      'PROCEDURES',
      'PROCEED',
      'PROCESSING',
      'PROGRAM',
      'PROGRAM-ID',
      'QUOTE',
      'QUOTES',
      'RANDOM',
      'RD',
      'READ',
      'READY',
      'RECEIVE',
      'RECORD',
      'RECORDING',
      'RECORDS',
      'REDEFINES',
      'REEL',
      'REFERENCE',
      'REFERENCES',
      'RELATIVE',
      'RELEASE',
      'REMAINDER',
      'REMOVAL',
      'RENAMES',
      'REPLACE',
      'REPLACING',
      'REPORT',
      'REPORTING',
      'REPORTS',
      'REPOSITORY',
      'RERUN',
      'RESERVE',
      'RESET',
      'RETURN',
      'RETURN-CODE',
      'RETURNING',
      'REVERSED',
      'REWIND',
      'REWRITE',
      'RF',
      'RH',
      'RIGHT',
      'ROUNDED',
      'RUN',
      'SAME',
      'SD',
      'SEARCH',
      'SECTION',
      'SECURITY',
      'SEGMENT',
      'SEGMENT-LIMIT',
      'SELECT',
      'SELF',
      'SEND',
      'SENTENCE',
      'SEPARATE',
      'SEQUENCE',
      'SEQUENTIAL',
      'SET',
      'SHARED',
      'SIGN',
      'SIZE',
      'SORT',
      'SORT-MERGE',
      'SOURCE',
      'SOURCE-COMPUTER',
      'SPACE',
      'SPACES',
      'SPECIAL-NAMES',
      'STANDARD',
      'STANDARD-1',
      'STANDARD-2',
      'START',
      'STATUS',
      'STOP',
      'STRING',
      'SUB-QUEUE-1',
      'SUB-QUEUE-2',
      'SUB-QUEUE-3',
      'SUBTRACT',
      'SUM',
      'SUPPRESS',
      'SYMBOLIC',
      'SYNC',
      'SYNCHRONIZED',
      'TABLE',
      'TALLY',
      'TALLYING',
      'TAPE',
      'TERMINAL',
      'TERMINATE',
      'TEST',
      'TEXT',
      'THAN',
      'THEN',
      'THROUGH',
      'THRU',
      'TIME',
      'TIMES',
      'TO',
      'TOP',
      'TRAILING',
      'TRUE',
      'TYPE',
      'UNIT',
      'UNSTRING',
      'UNTIL',
      'UP',
      'UPON',
      'USAGE',
      'USE',
      'USING',
      'VALUE',
      'VALUES',
      'VARYING',
      'WHEN',
      'WHEN-COMPILED',
      'WITH',
      'WORDS',
      'WORKING-STORAGE',
      'WRITE',
      'ZERO',
      'ZEROS',
      'ZEROES'
    },

    // Pascal
    'pascal': {
      'and',
      'array',
      'begin',
      'case',
      'const',
      'div',
      'do',
      'downto',
      'else',
      'end',
      'file',
      'for',
      'function',
      'goto',
      'if',
      'in',
      'label',
      'mod',
      'nil',
      'not',
      'of',
      'or',
      'packed',
      'procedure',
      'program',
      'record',
      'repeat',
      'set',
      'then',
      'to',
      'type',
      'until',
      'var',
      'while',
      'with'
    },

    // Scheme
    'scheme': {
      'case',
      'cond',
      'define',
      'do',
      'else',
      'if',
      'lambda',
      'let',
      'let*',
      'letrec',
      'or',
      'quote',
      'set!',
      'unless',
      'when'
    },

    // Prolog
    'prolog': {
      'assert',
      'asserta',
      'assertz',
      'bagof',
      'call',
      'catch',
      'choice_point',
      'clause',
      'commit',
      'consult',
      'fail',
      'false',
      'findall',
      'forall',
      'get',
      'halt',
      'if',
      'in',
      'include',
      'listing',
      'load',
      'multifile',
      'not',
      'or',
      'otherwise',
      'predicate',
      'prolog',
      'put',
      'query',
      'redo',
      'repeat',
      'retract',
      'retractall',
      'save',
      'set',
      'spy',
      'statistics',
      'true',
      'try',
      'unify',
      'use_module',
      'user',
      'volatile',
      'while',
      'write'
    },

    // ActionScript
    'actionscript': {
      'as',
      'break',
      'case',
      'catch',
      'class',
      'const',
      'continue',
      'default',
      'delete',
      'do',
      'else',
      'extends',
      'false',
      'finally',
      'for',
      'function',
      'if',
      'implements',
      'import',
      'in',
      'instanceof',
      'interface',
      'internal',
      'is',
      'native',
      'new',
      'null',
      'package',
      'private',
      'protected',
      'public',
      'return',
      'super',
      'switch',
      'this',
      'throw',
      'to',
      'true',
      'try',
      'typeof',
      'use',
      'var',
      'void',
      'while',
      'with'
    },

    // Assembly
    'assembly': {
      'aaa',
      'aad',
      'aam',
      'aas',
      'adc',
      'add',
      'and',
      'call',
      'cbw',
      'clc',
      'cld',
      'cli',
      'cmc',
      'cmp',
      'cmpsb',
      'cmpsw',
      'cwd',
      'daa',
      'das',
      'dec',
      'div',
      'esc',
      'hlt',
      'idiv',
      'imul',
      'in',
      'inc',
      'int',
      'into',
      'iret',
      'ja',
      'jae',
      'jb',
      'jbe',
      'jc',
      'jcxz',
      'je',
      'jg',
      'jge',
      'jl',
      'jle',
      'jmp',
      'jna',
      'jnae',
      'jnb',
      'jnbe',
      'jnc',
      'jne',
      'jng',
      'jnge',
      'jnl',
      'jnle',
      'jno',
      'jnp',
      'jns',
      'jnz',
      'jo',
      'jp',
      'jpe',
      'jpo',
      'js',
      'jz',
      'lahf',
      'lds',
      'lea',
      'les',
      'lock',
      'lodsb',
      'lodsw',
      'loop',
      'loope',
      'loopne',
      'loopnz',
      'loopz',
      'mov',
      'movsb',
      'movsw',
      'mul',
      'neg',
      'nop',
      'not',
      'or',
      'out',
      'pop',
      'popf',
      'push',
      'pushf',
      'rcl',
      'rcr',
      'rep',
      'repe',
      'repne',
      'repnz',
      'repz',
      'ret',
      'retn',
      'rol',
      'ror',
      'sahf',
      'sal',
      'sar',
      'sbb',
      'scasb',
      'scasw',
      'shl',
      'shr',
      'stc',
      'std',
      'sti',
      'stosb',
      'stosw',
      'sub',
      'test',
      'wait',
      'xchg',
      'xlat',
      'xor'
    },

    // Apex
    'apex': {
      'abstract',
      'activate',
      'and',
      'any',
      'array',
      'as',
      'asc',
      'autonomous',
      'begin',
      'bigdecimal',
      'blob',
      'break',
      'bulk',
      'by',
      'byte',
      'case',
      'cast',
      'catch',
      'char',
      'class',
      'collect',
      'commit',
      'const',
      'continue',
      'convertcurrency',
      'decimal',
      'default',
      'delete',
      'desc',
      'do',
      'else',
      'end',
      'enum',
      'exit',
      'extends',
      'false',
      'final',
      'finally',
      'float',
      'for',
      'from',
      'future',
      'global',
      'goto',
      'group',
      'having',
      'hint',
      'if',
      'implements',
      'import',
      'inner',
      'insert',
      'instanceof',
      'int',
      'interface',
      'into',
      'join',
      'last_90_days',
      'last_month',
      'last_n_days',
      'last_week',
      'like',
      'limit',
      'loop',
      'map',
      'merge',
      'new',
      'next_90_days',
      'next_month',
      'next_n_days',
      'next_week',
      'not',
      'null',
      'nulls',
      'number',
      'object',
      'of',
      'on',
      'or',
      'outer',
      'override',
      'package',
      'parallel',
      'pragma',
      'private',
      'protected',
      'public',
      'retrieve',
      'return',
      'rollback',
      'savepoint',
      'search',
      'select',
      'set',
      'short',
      'sort',
      'static',
      'super',
      'switch',
      'synchronized',
      'system',
      'testmethod',
      'then',
      'this',
      'throw',
      'throws',
      'transaction',
      'trigger',
      'true',
      'try',
      'type',
      'undelete',
      'update',
      'upsert',
      'using',
      'virtual',
      'void',
      'volatile',
      'webservice',
      'when',
      'where',
      'while',
      'yesterday'
    },

    // Tcl
    'tcl': {
      'after',
      'append',
      'apply',
      'array',
      'auto_execok',
      'auto_import',
      'auto_load',
      'auto_mkindex',
      'auto_mkindex_old',
      'auto_qualify',
      'auto_reset',
      'bgerror',
      'binary',
      'break',
      'case',
      'catch',
      'cd',
      'chan',
      'clock',
      'close',
      'concat',
      'continue',
      'coroutine',
      'dict',
      'encoding',
      'eof',
      'error',
      'eval',
      'exec',
      'exit',
      'expr',
      'fblocked',
      'fconfigure',
      'fcopy',
      'file',
      'fileevent',
      'flush',
      'for',
      'foreach',
      'format',
      'gets',
      'glob',
      'global',
      'history',
      'http',
      'if',
      'incr',
      'info',
      'interp',
      'join',
      'lappend',
      'lassign',
      'lindex',
      'linsert',
      'list',
      'llength',
      'load',
      'lrange',
      'lrepeat',
      'lreplace',
      'lreverse',
      'lsearch',
      'lset',
      'lsort',
      'mathfunc',
      'mathop',
      'memory',
      'msgcat',
      'my',
      'namespace',
      'next',
      'nextto',
      'oo::class',
      'oo::copy',
      'oo::define',
      'oo::objdefine',
      'oo::object',
      'open',
      'package',
      'parray',
      'pid',
      'pkg::create',
      'pkg_mkIndex',
      'platform',
      'platform::shell',
      'proc',
      'puts',
      'pwd',
      'read',
      'refchan',
      'regexp',
      'registry',
      'regsub',
      'rename',
      'return',
      'safe',
      'scan',
      'seek',
      'set',
      'socket',
      'source',
      'split',
      'string',
      'subst',
      'switch',
      'tcl::tm::path',
      'tcl_endOfWord',
      'tcl_startOfNextWord',
      'tcl_startOfPreviousWord',
      'tcl_wordBreakAfter',
      'tcl_wordBreakBefore',
      'tcltest',
      'tclvars',
      'tell',
      'time',
      'tm',
      'trace',
      'try',
      'unknown',
      'unload',
      'unset',
      'update',
      'uplevel',
      'upvar',
      'variable',
      'vwait',
      'while',
      'yield',
      'yieldto',
      'zlib'
    }, // VHDL
    'vhdl': {
      'abs', 'access', 'after', 'alias', 'all', 'and', 'architecture', 'array', 'assert',
      'attribute', 'begin', 'block', 'body', 'buffer', 'bus', 'case', 'component', 'configuration',
      'constant', 'disconnect', 'downto', 'else', 'elsif', 'end', 'entity', 'exit', 'file',
      'for', 'function', 'generate', 'generic', 'group', 'guarded', 'if', 'impure', 'in',
      'inertial', 'inout', 'is', 'label', 'library', 'linkage', 'literal', 'loop', 'map',
      'mod', 'nand', 'new', 'next', 'nor', 'not', 'null', 'of', 'on', 'open', 'or', 'others',
      'out', 'package', 'port', 'postponed', 'procedure', 'process', 'pure', 'range', 'record',
      'register', 'reject', 'rem', 'report', 'return', 'rol', 'ror', 'select', 'severity',
      'signal', 'shared', 'sla', 'sll', 'sra', 'srl', 'subtype', 'then', 'to', 'transport',
      'type', 'unaffected', 'units', 'until', 'use', 'variable', 'wait', 'when', 'while', 'with',
      'xnor', 'xor'
    },

    // Verilog
    'verilog': {
      'always', 'and', 'assign', 'automatic', 'begin', 'buf', 'bufif0', 'bufif1', 'case',
      'casex', 'casez', 'cell', 'cmos', 'config', 'deassign', 'default', 'defparam', 'design',
      'disable', 'edge', 'else', 'end', 'endcase', 'endconfig', 'endfunction', 'endgenerate',
      'endmodule', 'endprimitive', 'endspecify', 'endtable', 'endtask', 'event', 'for', 'force',
      'forever', 'fork', 'function', 'generate', 'genvar', 'highz0', 'highz1', 'if', 'ifnone',
      'incdir', 'include', 'initial', 'inout', 'input', 'instance', 'integer', 'join', 'large',
      'liblist', 'library', 'localparam', 'macromodule', 'medium', 'module', 'nand', 'negedge',
      'nmos', 'nor', 'noshowcancelled', 'not', 'notif0', 'notif1', 'or', 'output', 'parameter',
      'pmos', 'posedge', 'primitive', 'pull0', 'pull1', 'pulldown', 'pullup', 'pulsestyle_onevent',
      'pulsestyle_ondetect', 'rcmos', 'real', 'realtime', 'reg', 'release', 'repeat', 'rnmos',
      'rpmos', 'rtran', 'rtranif0', 'rtranif1', 'scalared', 'showcancelled', 'signed', 'small',
      'specify', 'specparam', 'strong0', 'strong1', 'supply0', 'supply1', 'table', 'task', 'time',
      'tran', 'tranif0', 'tranif1', 'tri', 'tri0', 'tri1', 'triand', 'trior', 'trireg', 'unsigned',
      'use', 'uwire', 'vectored', 'wait', 'wand', 'weak0', 'weak1', 'while', 'wire', 'wor', 'xnor', 'xor'
    },

    // ABAP
    'abap': {
      'abstract', 'add', 'add-corresponding', 'adjacent', 'after', 'alias', 'aliases', 'align',
      'all', 'allocate', 'alpha', 'analysis', 'and', 'append', 'appendage', 'as', 'asc', 'ascending',
      'assert', 'assign', 'assigned', 'assigning', 'association', 'asynchronous', 'at', 'attributes',
      'authority-check', 'avg', 'back', 'background', 'backup', 'backward', 'badi', 'begin', 'between',
      'big', 'binary', 'bintohex', 'bit', 'bit-and', 'bit-not', 'bit-or', 'bit-xor', 'black', 'blank',
      'bline', 'block', 'blocks', 'blue', 'bound', 'bounds', 'boxed', 'break-point', 'brows', 'buffer',
      'by', 'bypassing', 'byte', 'byte-order', 'call', 'calling', 'case', 'cast', 'catch', 'center',
      'centered', 'chain', 'chain-input', 'chain-request', 'change', 'changed', 'changing', 'channels',
      'character', 'check', 'checkbox', 'ci_', 'ci_include', 'circular', 'class', 'class-coding', 'class-data',
      'class-events', 'class-methods', 'class-pool', 'cleanup', 'clear', 'client', 'clob', 'clock', 'close',
      'cnt', 'co', 'cntb', 'cntn', 'collect', 'color', 'column', 'columns', 'comment', 'commit', 'communication',
      'comparing', 'component', 'components', 'compression', 'compute', 'concat', 'concat_with_space', 'concatenate',
      'cond', 'condition', 'connect', 'connection', 'constants', 'context', 'contexts', 'continue', 'control',
      'controls', 'conv', 'conversion', 'convert', 'copy', 'corresponding', 'count', 'country', 'cover', 'cpi',
      'create', 'creating', 'critical', 'currency', 'currency_conversion', 'current', 'cursor', 'custom', 'customer',
      'customer-function', 'data', 'database', 'date', 'daylight', 'dd/mm/yy', 'dd/mm/yyyy', 'debugging',
      'decimal_shift', 'decimals', 'deep', 'default', 'define', 'defining', 'definition', 'delete', 'deleting',
      'demand', 'department', 'descending', 'describe', 'destination', 'detail', 'dialog', 'directory', 'disconnect',
      'display', 'display-mode', 'distinct', 'div', 'divide', 'divide-corresponding', 'division', 'do', 'dummy',
      'duplicate', 'duplicates', 'during', 'dynamic', 'dynpro', 'e', 'each', 'edit', 'editor-call', 'else', 'elseif',
      'empty', 'enabling', 'encoding', 'end', 'endat', 'endcase', 'endcatch', 'endchain', 'enddo', 'endexec', 'endfunction',
      'endif', 'ending', 'endinterface', 'endloop', 'endmethod', 'endmodule', 'end-of-definition', 'end-of-file',
      'end-of-page', 'end-of-selection', 'endprovide', 'endselect', 'endtry', 'endwhile', 'engineering', 'enhancement',
      'enhancement-point', 'enhancements', 'enhancement-section', 'entries', 'entry', 'environment', 'eq', 'equipment',
      'errormessage', 'errors', 'escape', 'escaping', 'event', 'events', 'exact', 'except', 'exception', 'exceptions',
      'exclude', 'excluding', 'exec', 'execute', 'exists', 'exit', 'exit-command', 'exp', 'expand', 'expiration', 'explicit',
      'expiring', 'export', 'exporting', 'extend', 'extended', 'extension', 'extract', 'fail', 'fetch', 'field', 'fields',
      'field-groups', 'field-symbols', 'file', 'filter', 'final', 'find', 'finish', 'first', 'first-line', 'fixed-point',
      'fkeq', 'fkge', 'flush', 'font', 'for', 'format', 'forward', 'found', 'frame', 'frames', 'free', 'friends', 'from',
      'function', 'function-pool', 'further', 'gaps', 'ge', 'generate', 'get', 'giving', 'gt', 'handle', 'handler', 'harmless',
      'hash', 'hashed', 'having', 'head-lines', 'header', 'heading', 'help-id', 'help-request', 'help-view', 'hide', 'high',
      'hint', 'hold', 'hotspot', 'i', 'id', 'identification', 'identifier', 'ids', 'if', 'ignore', 'ignoring', 'immediately',
      'implementation', 'implementations', 'implicit', 'import', 'importing', 'in', 'inactive', 'incl', 'include', 'includes',
      'including', 'increment', 'index', 'index-line', 'infotypes', 'inheriting', 'init', 'initial', 'initialization', 'inner',
      'inout', 'input', 'insert', 'instance', 'instances', 'instruction', 'intensified', 'intensity', 'interface', 'interfaces',
      'interface-pool', 'internal', 'interval', 'into', 'inverse', 'inverted-date', 'is', 'iso', 'job', 'join', 'keep', 'keeping',
      'kernel', 'key', 'keys', 'kind', 'language', 'last', 'late', 'layout', 'lead', 'leading', 'leave', 'leaving', 'left', 'left-justified',
      'leftplus', 'leftspace', 'legacy', 'length', 'let', 'level', 'levels', 'like', 'line', 'line-count', 'line-size', 'linefeed',
      'lines', 'list', 'list-processing', 'listbox', 'little', 'llang', 'load', 'load-of-program', 'lob', 'local', 'locale',
      'locator', 'logfile', 'logical', 'log-point', 'long', 'loop', 'low', 'lower', 'lpad', 'lpi', 'lt', 'm', 'main', 'major-id',
      'mapping', 'margin', 'mark', 'mask', 'match', 'matchcode', 'max', 'max-lines', 'maximum', 'medium', 'member', 'memory',
      'message', 'message-id', 'messages', 'messaging', 'metaclass', 'method', 'methods', 'min', 'minimum', 'minor-id', 'mm/dd/yy',
      'mm/dd/yyyy', 'mode', 'modif', 'modify', 'module', 'modules', 'move', 'move-corresponding', 'multiply', 'multiply-corresponding',
      'na', 'name', 'nametab', 'native', 'nested', 'new', 'new-line', 'new-page', 'new-section', 'next', 'no', 'no-display',
      'no-extension', 'no-gap', 'no-gaps', 'no-grouping', 'no-heading', 'no-scrolling', 'no-sign', 'no-title', 'no-topofpage',
      'no-zero', 'node', 'nodes', 'non-unicode', 'non-unique', 'not', 'null', 'number', 'object', 'objname', 'obligatory', 'occurs',
      'of', 'off', 'offset', 'ole', 'on', 'only', 'open', 'option', 'optional', 'options', 'or', 'order', 'other', 'others',
      'out', 'outer', 'output', 'output-length', 'overflow', 'overlay', 'pack', 'package', 'pad', 'padding', 'page', 'pages',
      'parameter', 'parameters', 'part', 'partially', 'pattern', 'perform', 'performing', 'person', 'pf-status', 'pfnam', 'place',
      'places', 'pool', 'pos_high', 'pos_low', 'position', 'pragmas', 'precompiled', 'prefer', 'preferred', 'preserve', 'primary',
      'print', 'print-control', 'print-off', 'print-on', 'priority', 'private', 'procedure', 'process', 'program', 'property', 'protected',
      'provide', 'public', 'pushbutton', 'put', 'radio-button', 'radio-button-group', 'raise', 'raising', 'range', 'ranges', 'read',
      'reader', 'receive', 'received', 'receiver', 'receiving', 'reconnect', 'record', 'records', 'redefinition', 'reduce', 'reduced',
      'ref', 'reference', 'refresh', 'reject', 'remote', 'renaming', 'replace', 'replacement', 'replacing', 'report', 'report-line',
      'requested', 'request', 'reserve', 'reset', 'resolution', 'respecting', 'responsible', 'result', 'results', 'resume', 'retaining',
      'retrieve', 'retry', 'return', 'returning', 'returns', 'right', 'right-justified', 'rightplus', 'rightspace', 'risk', 'rmc_communication_failure',
      'rmc_invalid_status', 'rmc_system_failure', 'rollback', 'rollout', 'routine', 'rows', 'rp-provide-from-last', 'run', 'scan', 'screen',
      'scroll', 'scroll-boundary', 'scrolling', 'search', 'secondary', 'section', 'select', 'selection', 'selection-screen', 'selection-set',
      'selection-sets', 'selection-table', 'send', 'separated', 'separately', 'set', 'shared', 'shift', 'short', 'short-dump-id', 'short-field',
      'short-ref-id', 'short-text', 'sign', 'simple', 'single', 'size', 'skip', 'skipping', 'smart', 'sort', 'sortable', 'sorted', 'source',
      'space', 'spaces', 'spacing', 'specified', 'split', 'spool', 'spots', 'sql', 'stable', 'stack', 'stamp', 'stand-alone', 'standard',
      'standard-table', 'start', 'starting', 'statement', 'statements', 'static', 'statics', 'statusinfo', 'step-loop', 'stop', 'structure',
      'structures', 'style', 'subkey', 'submatches', 'submit', 'subroutine', 'subtract', 'subtract-corresponding', 'suffix', 'sum', 'summary',
      'summing', 'supplied', 'supply', 'suppress', 'switch', 'symbols', 'synchronize', 'syntax', 'syntax-check', 'syntax-trace', 'system-call',
      'system-exceptions', 'system-exit', 'tab', 'tabbed', 'table', 'tables', 'tableview', 'tabstrip', 'task', 'tasks', 'test', 'testing',
      'test-seam', 'test-injection', 'text', 'textpool', 'then', 'time', 'times', 'timestamp', 'timezone', 'title', 'title-lines', 'titlebar',
      'to', 'token', 'tokens', 'toolbar', 'top-lines', 'top-of-page', 'trace-file', 'trace-table', 'trailing', 'transaction', 'transfer',
      'transformation', 'translate', 'transport', 'trap', 'try', 'type', 'type-pool', 'type-pools', 'types', 'uline', 'unassign', 'under',
      'unicode', 'union', 'unique', 'unit', 'unix', 'unpack', 'until', 'unwind', 'up', 'update', 'upper', 'user', 'user-command', 'using',
      'utf-8', 'valid', 'value', 'value-request', 'values', 'variable', 'variant', 'variants', 'vary', 'varying', 'verification-message',
      'via', 'view', 'visible', 'wait', 'warning', 'when', 'whenever', 'where', 'while', 'width', 'window', 'windows', 'with', 'with-heading',
      'with-title', 'without', 'without-heading', 'without-title', 'work', 'workflow', 'write', 'writer', 'xmloption', 'xml', 'xml-respecting-blanks',
      'yellow', 'yes', 'yield', 'zero', 'zone'
    },

    // D
    'd': {
      'abstract', 'alias', 'align', 'asm', 'assert', 'auto', 'body', 'bool', 'break', 'byte',
      'case', 'cast', 'catch', 'cdouble', 'cent', 'cfloat', 'char', 'class', 'const', 'continue',
      'creal', 'dchar', 'debug', 'default', 'delegate', 'delete', 'deprecated', 'do', 'double',
      'else', 'enum', 'export', 'extern', 'false', 'final', 'finally', 'float', 'for', 'foreach',
      'foreach_reverse', 'function', 'goto', 'idouble', 'if', 'ifloat', 'immutable', 'import',
      'in', 'inout', 'int', 'interface', 'invariant', 'ireal', 'is', 'lazy', 'long', 'macro',
      'mixin', 'module', 'new', 'nothrow', 'null', 'out', 'override', 'package', 'pragma', 'private',
      'protected', 'public', 'pure', 'real', 'ref', 'return', 'scope', 'shared', 'short', 'static',
      'struct', 'super', 'switch', 'synchronized', 'template', 'this', 'throw', 'true', 'try',
      'typedef', 'typeid', 'typeof', 'ubyte', 'ucent', 'uint', 'ulong', 'union', 'unittest', 'ushort',
      'version', 'void', 'volatile', 'wchar', 'while', 'with'
    },

    // AWK
    'awk': {
      'BEGIN', 'END', 'if', 'else', 'while', 'do', 'for', 'in', 'next', 'break', 'continue',
      'delete', 'split', 'print', 'printf', 'sprintf', 'getline', 'return', 'exit', 'function'
    },

    // SED
    'sed': {
      'd', 's', 'p', 'n', 'b', 'y', 'q', 'l', 'a', 'i', 'c', 'r', 'h', 'g', 'x', 'N', 'P', 'D', 'H', 'G',
    },

    // Simula
    'simula': {
      'begin', 'end', 'integer', 'real', 'array', 'procedure', 'this', 'class', 'extends',
      'new', 'detach', 'if', 'then', 'else', 'while', 'step', 'until', 'do', 'goto', 'text',
      'Boolean', 'true', 'false', 'inner', 'none', 'not', 'and', 'or', 'eqv', 'neqv', 'label',
      'call', 'value', 'result', 'string', 'character', 'simulate', 'dynamic', 'model', 'file'
    },

    // Scala
    'scala': {
      'abstract', 'case', 'catch', 'class', 'def', 'do', 'else', 'extends', 'false', 'final',
      'finally', 'for', 'if', 'implicit', 'import', 'lazy', 'match', 'new', 'null', 'object',
      'override', 'package', 'private', 'protected', 'return', 'sealed', 'super', 'this', 'throw',
      'trait', 'try', 'true', 'type', 'val', 'var', 'while', 'with', 'yield'
    },
    // Matlab
    'matlab': {
      'break', 'case', 'catch', 'classdef', 'continue', 'else', 'elseif', 'end', 'for', 'function',
      'global', 'if', 'otherwise', 'parfor', 'persistent', 'return', 'spmd', 'switch', 'try', 'while'
    },

    // Lua
    'lua': {
      'and', 'break', 'do', 'else', 'elseif', 'end', 'false', 'for', 'function', 'goto', 'if',
      'in', 'local', 'nil', 'not', 'or', 'repeat', 'return', 'then', 'true', 'until', 'while'
    },

    // Groovy
    'groovy': {
      'as', 'assert', 'break', 'case', 'catch', 'class', 'const', 'continue', 'def', 'default', 'do',
      'else', 'enum', 'extends', 'false', 'finally', 'for', 'goto', 'if', 'implements', 'import',
      'in', 'instanceof', 'interface', 'new', 'null', 'package', 'return', 'super', 'switch', 'this',
      'throw', 'throws', 'trait', 'true', 'try', 'void', 'while'
    },

    // Objective-C
    'objective-c': {
      'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else',
      'enum', 'extern', 'float', 'for', 'goto', 'if', 'inline', 'int', 'long', 'register',
      'restrict', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef',
      'union', 'unsigned', 'void', 'volatile', 'while', 'BOOL', 'Class', 'bycopy', 'byref',
      'id', 'IMP', 'in', 'inout', 'nil', 'NO', 'NULL', 'oneway', 'out', 'Protocol', 'SEL', 'self',
      'super', 'YES', '@autoreleasepool', '@catch', '@class', '@dynamic', '@encode', '@end',
      '@finally', '@implementation', '@interface', '@import', '@optional', '@package', '@property',
      '@protocol', '@public', '@protected', '@private', '@required', '@selector', '@synthesize',
      '@throw', '@try', '#import'
    },

  };

  // Constants and built-in functions for each language
  static const Map<String, Set<String>> builtins = {
    'python': {
      // Built-in functions
      'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray',
      'bytes', 'callable', 'chr', 'classmethod', 'compile',
      'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate',
      'eval', 'exec', 'filter', 'float', 'format', 'frozenset',
      'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex',
      'id', 'input', 'int', 'isinstance', 'issubclass', 'iter',
      'len', 'list', 'locals', 'map', 'max', 'memoryview',
      'min', 'next', 'object', 'oct', 'open', 'ord', 'pow',
      'print', 'property', 'range', 'repr', 'reversed', 'round',
      'set', 'setattr', 'slice', 'sorted', 'staticmethod',
      'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip',
      '__import__'
    },
    'java': {
      // Built-in classes and interfaces
      'String', 'System', 'Object', 'Class', 'Math', 'Integer',
      'Double', 'Boolean', 'Character', 'Byte', 'Short', 'Long',
      'Float', 'Void', 'Thread', 'Runnable', 'Exception',
      // Common methods
      'toString', 'equals', 'hashCode', 'clone', 'compareTo',
      'valueOf', 'length', 'substring', 'indexOf', 'contains',
      // Math functions
      'abs', 'min', 'max', 'pow', 'sqrt', 'ceil', 'floor',
      'round', 'random',
      // System functions
      'out.println', 'out.print', 'currentTimeMillis', 'nanoTime',
      'arraycopy', 'gc'
    },
    'javascript': {
      // Global objects
      'Object', 'Array', 'String', 'Number', 'Boolean', 'Function',
      'Date', 'Math', 'RegExp', 'Error', 'JSON', 'Promise',
      'Map', 'Set', 'WeakMap', 'WeakSet', 'Symbol',
      // Global functions
      'parseInt', 'parseFloat', 'isNaN', 'isFinite', 'eval',
      'encodeURI', 'decodeURI', 'encodeURIComponent',
      'decodeURIComponent',
      // Console methods
      'console.log', 'console.error', 'console.warn', 'console.info',
      // Math functions
      'Math.abs', 'Math.ceil', 'Math.floor', 'Math.round',
      'Math.max', 'Math.min', 'Math.random', 'Math.pow'
    },
    'cpp': {
      // Standard functions
      'main', 'sizeof', 'new', 'delete',
      // IO streams
      'cout', 'cin', 'cerr', 'endl', 'flush',
      // String functions
      'strlen', 'strcpy', 'strcat', 'strcmp', 'strstr',
      // Memory functions
      'malloc', 'free', 'memcpy', 'memset', 'memmove',
      // Math functions
      'abs', 'pow', 'sqrt', 'ceil', 'floor', 'round',
      // Constants
      'NULL', 'true', 'false', 'nullptr'
    },
    'rust': {
      // Built-in macros
      'println!', 'print!', 'format!', 'vec!', 'assert!',
      'assert_eq!', 'panic!', 'include!', 'include_str!',
      // Common traits
      'Clone', 'Copy', 'Debug', 'Default', 'Drop', 'Eq',
      'Hash', 'Ord', 'PartialEq', 'PartialOrd', 'Send', 'Sync',
      // Common types
      'Option', 'Result', 'String', 'Vec', 'Box', 'Rc', 'Arc',
      // Common functions
      'unwrap', 'expect', 'map', 'and_then', 'or_else', 'into'
    },
    'go': {
      // Built-in functions
      'append', 'cap', 'close', 'complex', 'copy', 'delete',
      'len', 'make', 'new', 'panic', 'print', 'println',
      'recover', 'real', 'imag',
      // Built-in types
      'string', 'int', 'float64', 'bool', 'byte', 'rune',
      'error', 'interface{}',
      // Constants
      'true', 'false', 'nil', 'iota'
    },
    'swift': {
      // Global functions
      'print', 'debugPrint', 'dump', 'fatalError', 'abs', 'max',
      'min', 'stride', 'swap',
      // Type conversion
      'Int', 'Double', 'Float', 'String', 'Bool', 'Character',
      // Collection types
      'Array', 'Dictionary', 'Set',
      // Optional handling
      'Optional', 'nil', 'some', 'none'
    },
    'kotlin': {
      // Standard library functions
      'println', 'print', 'readLine', 'TODO', 'run', 'with',
      'let', 'also', 'apply', 'repeat',
      // Built-in types
      'String', 'Int', 'Double', 'Boolean', 'List', 'Map',
      'Set', 'Array',
      // Collection functions
      'listOf', 'mutableListOf', 'setOf', 'mutableSetOf',
      'mapOf', 'mutableMapOf'
    },
    'ruby': {
      // Global functions
      'puts', 'print', 'gets', 'raise', 'require', 'include',
      'extend', 'loop', 'proc', 'lambda',
      // Built-in classes
      'Object', 'String', 'Array', 'Hash', 'Numeric',
      'Integer', 'Float', 'Range', 'Regexp',
      // Common methods
      'each', 'map', 'select', 'reject', 'reduce', 'inject',
      'sort', 'reverse'
    },
    'csharp': {
      // Built-in types
      'object', 'string', 'int', 'double', 'bool', 'char', 'byte',
      'decimal', 'float', 'long', 'short', 'uint', 'ulong',
      // Common classes
      'Console', 'Convert', 'Math', 'String', 'Array', 'List',
      'Dictionary', 'DateTime', 'TimeSpan', 'Exception',
      // Console methods
      'Console.WriteLine', 'Console.Write', 'Console.ReadLine',
      // Common methods
      'ToString', 'GetType', 'Equals', 'GetHashCode', 'Parse',
      'TryParse'
    },
    'typescript': {
      // Built-in types
      'any', 'void', 'never', 'unknown', 'object', 'boolean',
      'number', 'string', 'symbol', 'undefined', 'null',
      // Utility types
      'Partial', 'Required', 'Readonly', 'Record', 'Pick',
      'Omit', 'Exclude', 'Extract', 'NonNullable', 'Parameters',
      'ReturnType', 'InstanceType',
      // Global objects (including JavaScript ones)
      'Array', 'Date', 'Error', 'Promise', 'Map', 'Set',
      'WeakMap', 'WeakSet', 'Proxy', 'Reflect'
    },
    'php': {
      // Array functions
      'array_push', 'array_pop', 'array_shift', 'array_unshift',
      'count', 'sort', 'rsort', 'implode', 'explode',
      // String functions
      'strlen', 'str_replace', 'substr', 'strtolower', 'strtoupper',
      'trim', 'rtrim', 'ltrim',
      // Math functions
      'abs', 'round', 'ceil', 'floor', 'max', 'min', 'rand',
      // File operations
      'fopen', 'fclose', 'fread', 'fwrite', 'file_get_contents',
      'file_put_contents'
    },
    'scala': {
      // Built-in types
      'Any', 'AnyRef', 'AnyVal', 'Unit', 'Null', 'Nothing',
      'Int', 'Long', 'Float', 'Double', 'Boolean', 'String',
      // Collection types
      'List', 'Set', 'Map', 'Seq', 'Vector', 'Array',
      // Common methods
      'map', 'flatMap', 'filter', 'fold', 'reduce', 'foreach',
      'match', 'case'
    },
    'perl': {
      // Built-in functions
      'print', 'say', 'chomp', 'chop', 'length', 'index',
      'substr', 'split', 'join', 'push', 'pop', 'shift',
      'unshift', 'sort', 'reverse',
      // File operations
      'open', 'close', 'read', 'write', 'seek',
    },
    'haskell': {
      // Prelude functions
      'map', 'filter', 'foldr', 'foldl', 'zip', 'unzip',
      'head', 'tail', 'init', 'last', 'length', 'reverse',
      // Type classes
      'Eq', 'Ord', 'Show', 'Read', 'Num', 'Integral',
      'Fractional', 'Floating', 'Functor', 'Applicative', 'Monad',
      // Common types
      'Int', 'Integer', 'Float', 'Double', 'Bool', 'Char',
      'String', 'Maybe', 'Either'
    },
    'r': {
      // Basic functions
      'c', 'seq', 'rep', 'data.frame', 'list', 'matrix',
      'mean', 'median', 'sum', 'min', 'max', 'range',
      // Statistical functions
      'sd', 'var', 'cor', 'cov', 't.test', 'lm', 'glm',
      // Plotting functions
      'plot', 'hist', 'boxplot', 'barplot', 'lines', 'points',
      // Data manipulation
      'subset', 'merge', 'aggregate', 'apply', 'lapply', 'sapply'
    },
    'dart': {
      // Core types
      'Object', 'String', 'int', 'double', 'bool', 'List',
      'Map', 'Set', 'Future', 'Stream', 'Iterable',
      // Built-in functions
      'print', 'assert', 'identical', 'toString', 'hashCode',
      // Common methods
      'map', 'where', 'forEach', 'reduce', 'fold', 'any', 'every'
    },
    'lua': {
      // Global functions
      'print', 'tonumber', 'tostring', 'type', 'pairs',
      'ipairs', 'next', 'require', 'pcall', 'error',
      // Math functions
      'math.abs', 'math.ceil', 'math.floor', 'math.max',
      'math.min', 'math.random', 'math.sqrt',
      // String functions
      'string.len', 'string.sub', 'string.upper', 'string.lower',
      // Table functions
      'table.insert', 'table.remove', 'table.sort', 'table.concat'
    },
    'julia': {
      // Built-in functions
      'println', 'print', 'typeof', 'convert', 'parse',
      'push!', 'pop!', 'sort!', 'reverse!',
      // Math functions
      'abs', 'sqrt', 'exp', 'log', 'sin', 'cos', 'tan',
      // Array operations
      'length', 'size', 'ndims', 'reshape', 'view',
      // Types
      'Number', 'Integer', 'Float64', 'String', 'Array', 'Dict'
    },
    'erlang': {
      // Built-in functions
      'spawn', 'send', 'receive', 'register', 'whereis',
      'process_flag', 'link', 'unlink', 'monitor',
      // List operations
      'length', 'hd', 'tl', 'lists:map', 'lists:filter',
      'lists:foldl', 'lists:foldr',
      // Type conversions
      'atom_to_list', 'list_to_atom', 'integer_to_list',
      'list_to_integer'
    },
    'elixir': {
      // Built-in modules
      'Kernel', 'String', 'List', 'Map', 'Enum', 'Stream',
      'Process', 'Task', 'Agent', 'GenServer',
      // Common functions
      'IO.puts', 'IO.gets', 'Enum.map', 'Enum.reduce',
      'String.length', 'String.split', 'List.first', 'List.last',
      // Process functions
      'spawn', 'send', 'receive', 'self', 'Process.alive?'
    },
    'clojure': {
      // Core functions
      'def', 'defn', 'let', 'if', 'do', 'fn', 'loop', 'recur',
      'map', 'reduce', 'filter', 'comp', 'partial',
      // Sequence operations
      'first', 'rest', 'cons', 'conj', 'into', 'seq',
      // Math operations
      '+', '-', '*', '/', 'inc', 'dec', 'max', 'min',
      // Type predicates
      'nil?', 'true?', 'false?', 'zero?', 'pos?', 'neg?'
    },
    'prolog': {
      // Built-in predicates
      'true', 'fail', 'call', 'not', 'var', 'nonvar',
      'atom', 'integer', 'float', 'number',
      // List operations
      'member', 'append', 'length', 'sort', 'reverse',
      // IO predicates
      'write', 'writeln', 'read', 'get', 'put',
      // Database operations
      'assert', 'retract', 'clause', 'abolish'
    },
    'sql': {
      // Functions
      'COUNT', 'SUM', 'AVG', 'MAX', 'MIN', 'ROUND',
      'UPPER', 'LOWER', 'TRIM', 'LENGTH', 'SUBSTR',
      // Date functions
      'DATE', 'DATETIME', 'NOW', 'YEAR', 'MONTH', 'DAY',
      // Aggregate functions
      'GROUP_CONCAT', 'HAVING', 'GROUP BY', 'ORDER BY',
      // Window functions
      'ROW_NUMBER', 'RANK', 'DENSE_RANK', 'LAG', 'LEAD'
    },
    'matlab': {
      // Math functions
      'abs', 'sqrt', 'exp', 'log', 'sin', 'cos', 'tan',
      'round', 'floor', 'ceil',
      // Matrix operations
      'size', 'length', 'reshape', 'transpose', 'inv',
      'eig', 'det', 'rank',
      // Plot functions
      'plot', 'figure', 'subplot', 'title', 'xlabel', 'ylabel',
      // Data types
      'double', 'single', 'int8', 'int16', 'int32', 'logical'
    },
    'cobol': {
      // Built-in functions
      'ACCEPT', 'DISPLAY', 'MOVE', 'ADD', 'SUBTRACT',
      'MULTIPLY', 'DIVIDE', 'COMPUTE',
      // String operations
      'STRING', 'UNSTRING', 'INSPECT', 'REPLACE',
      // File operations
      'OPEN', 'CLOSE', 'READ', 'WRITE', 'REWRITE',
      // Control flow
      'PERFORM', 'IF', 'EVALUATE', 'GO TO'
    },
    'fortran': {
      // Intrinsic functions
      'ABS', 'SQRT', 'EXP', 'LOG', 'SIN', 'COS', 'TAN',
      'INT', 'REAL', 'CMPLX', 'AINT', 'ANINT',
      // Array functions
      'SIZE', 'SHAPE', 'LBOUND', 'UBOUND', 'MAXVAL', 'MINVAL',
      // String functions
      'LEN', 'TRIM', 'ADJUSTL', 'ADJUSTR', 'INDEX',
      // IO functions
      'PRINT', 'READ', 'WRITE', 'OPEN', 'CLOSE'
    },
    'vbnet': {
      // Built-in functions
      'CInt', 'CLng', 'CDbl', 'CStr', 'CBool', 'CDate',
      'Len', 'Left', 'Right', 'Mid', 'Trim', 'LTrim', 'RTrim',
      // Math functions
      'Abs', 'Int', 'Fix', 'Sgn', 'Math.Sqrt', 'Math.Round',
      // String functions
      'UCase', 'LCase', 'Space', 'String', 'Replace', 'InStr',
      // Array functions
      'Array', 'ReDim', 'Erase', 'LBound', 'UBound',
      // Conversion
      'Val', 'Str', 'Hex', 'Oct', 'Asc', 'Chr'
    },
    'ada': {
      // Built-in types
      'Integer', 'Float', 'Boolean', 'Character', 'String',
      'Natural', 'Positive',
      // IO functions
      'Put', 'Put_Line', 'Get', 'Get_Line',
      // Math functions
      'Abs', 'Sqrt', 'Float_Round', 'Integer_Round',
      // String operations
      'Length', 'Slice', 'Index', 'Count'
    },
    'lisp': {
      // Basic functions
      'car', 'cdr', 'cons', 'list', 'append', 'reverse',
      'length', 'member', 'assoc',
      // Math operations
      '+', '-', '*', '/', 'mod', 'rem', 'max', 'min',
      // Predicates
      'null', 'atom', 'listp', 'numberp', 'symbolp', 'zerop',
      // Control flow
      'if', 'when', 'unless', 'cond', 'and', 'or', 'not'
    },
    'fsharp': {
      // Basic functions
      'printfn', 'sprintf', 'failwith', 'invalidArg',
      // List operations
      'List.map', 'List.filter', 'List.fold', 'List.reduce',
      // Array operations
      'Array.length', 'Array.create', 'Array.init',
      // Option type
      'Some', 'None', 'Option.map', 'Option.bind',
      // Common types
      'int', 'float', 'string', 'bool', 'unit', 'option'
    },
    'smalltalk': {
      // Basic messages
      'new', 'class', 'yourself', 'isNil', 'notNil',
      // Collection messages
      'add:', 'remove:', 'includes:', 'do:', 'collect:',
      'select:', 'reject:', 'inject:into:',
      // Stream messages
      'nextPut:', 'nextPutAll:', 'cr', 'space', 'tab',
      // System messages
      'at:', 'at:put:', 'size', 'copy', 'deepCopy'
    },
    'pascal': {
      // Built-in procedures
      'Write', 'WriteLn', 'Read', 'ReadLn', 'New', 'Dispose',
      // Math functions
      'Abs', 'Sqr', 'Sqrt', 'Sin', 'Cos', 'Arctan',
      // String functions
      'Length', 'Copy', 'Delete', 'Insert', 'Pos', 'Concat',
      // Type conversion
      'Chr', 'Ord', 'Round', 'Trunc', 'Int', 'Str'
    },
    'scheme': {
      // Basic procedures
      'car', 'cdr', 'cons', 'list', 'append', 'reverse',
      // Math operations
      '+', '-', '*', '/', 'quotient', 'remainder',
      // Predicates
      'eq?', 'eqv?', 'equal?', 'null?', 'pair?', 'list?',
      // Control flow
      'if', 'cond', 'case', 'and', 'or', 'not'
    },
    'actionscript': {
      // Built-in classes
      'String', 'Number', 'Boolean', 'Array', 'Object', 'Date',
      // Display objects
      'Sprite', 'MovieClip', 'Stage', 'Graphics',
      // Event handling
      'addEventListener', 'removeEventListener', 'dispatchEvent',
      // Math functions
      'Math.abs', 'Math.round', 'Math.floor', 'Math.ceil'
    },
    'assembly': {
      // Common instructions
      'mov', 'push', 'pop', 'call', 'ret', 'jmp',
      'add', 'sub', 'mul', 'div', 'and', 'or', 'xor',
      // Comparison
      'cmp', 'test', 'je', 'jne', 'jg', 'jl',
      // System calls
      'int', 'syscall', 'sysenter'
    },
    'apex': {
      // Built-in classes
      'System', 'String', 'Integer', 'Double', 'Decimal',
      'Date', 'DateTime', 'ID', 'List', 'Set', 'Map',
      // DML operations
      'insert', 'update', 'delete', 'upsert', 'merge',
      // SOQL/SOSL
      'Database.query', 'Database.search',
      // Testing
      'Test.startTest', 'Test.stopTest', 'System.assert'
    },
    'tcl': {
      // Basic commands
      'puts', 'gets', 'set', 'unset', 'rename', 'proc',
      // Control flow
      'if', 'switch', 'while', 'for', 'foreach', 'break',
      // List operations
      'lindex', 'lappend', 'linsert', 'lreplace', 'llength',
      // String operations
      'string length', 'string index', 'string range'
    },
    'plsql': {
      // Built-in packages
      'DBMS_OUTPUT', 'DBMS_SQL', 'UTL_FILE', 'UTL_MAIL',
      // String functions
      'SUBSTR', 'INSTR', 'REPLACE', 'UPPER', 'LOWER', 'TRIM',
      // Date functions
      'SYSDATE', 'ADD_MONTHS', 'MONTHS_BETWEEN', 'TRUNC',
      // Numeric functions
      'ROUND', 'CEIL', 'FLOOR', 'MOD', 'POWER', 'SQRT'
    },
    'vhdl': {
      // Predefined types
      'bit', 'bit_vector', 'boolean', 'character', 'integer',
      'real', 'time', 'string',
      // Operators
      'and', 'or', 'nand', 'nor', 'xor', 'not',
      // Attributes
      'event', 'last_value', 'left', 'right', 'high', 'low'
    },
    'verilog': {
      // System tasks
      'display', 'write', 'monitor', 'time', 'stop',
      'finish', 'random',
      // Primitives
      'and', 'or', 'nand', 'nor', 'xor', 'not',
      // Net types
      'wire', 'reg', 'integer', 'real', 'event',
    },
    'abap': {
      // Built-in functions
      'CONCATENATE', 'CONDENSE', 'CONVERT', 'SHIFT', 'TRANSLATE',
      // Database operations
      'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'MODIFY',
      // System fields
      'SY-DATUM', 'SY-UZEIT', 'SY-UNAME', 'SY-LANGU',
      // Type conversion
      'CONV_TO_CHAR', 'CONV_TO_INT', 'CONV_TO_DEC'
    },
    'd': {
      // Built-in types
      'void', 'bool', 'byte', 'ubyte', 'short', 'ushort',
      'int', 'uint', 'long', 'ulong', 'float', 'double',
      // Array operations
      'length', 'dup', 'iota', 'sort', 'reverse',
      // String operations
      'toLower', 'toUpper', 'strip', 'split', 'join'
    },
    'awk': {
      // Built-in variables
      'NR', 'NF', 'FS', 'RS', 'OFS', 'ORS', 'FILENAME',
      // String functions
      'length', 'substr', 'index', 'match', 'split',
      // Math functions
      'int', 'sqrt', 'sin', 'cos', 'exp', 'log',
      // IO functions
      'print', 'printf', 'sprintf', 'getline'
    },
    'sed': {
      // Commands
      's', 'y', 'd', 'p', 'n', 'a', 'i', 'c', 'r', 'w',
      // Regular expression symbols
      '^', '.', '*', '+', '?', '\\', '[', ']',
      // Addresses
      '0', '/',
    },
    'simula': {
      // Built-in procedures
      'new', 'dispose', 'resume', 'detach', 'call',
      // Text handling
      'putchar', 'getchar', 'puttext', 'gettext',
      // Mathematical functions
      'abs', 'sign', 'entier', 'sqrt', 'sin', 'cos'
    },
    'objectivec': {
      // Foundation classes
      'NSObject', 'NSString', 'NSArray', 'NSDictionary', 'NSNumber',
      'NSDate', 'NSData', 'NSNull', 'NSError', 'NSException',
      // Memory management
      'alloc', 'init', 'retain', 'release', 'autorelease',
      // String methods
      'length', 'characterAtIndex:', 'substringFromIndex:',
      'substringToIndex:', 'stringByAppendingString:',
      // Common macros
      'NSLog', 'YES', 'NO', 'nil', 'NULL', 'self', 'super',
      // Runtime functions
      'objc_msgSend', 'class', 'selector', 'protocol'
    },
    'bash': {
      // Built-in commands
      'echo', 'cd', 'pwd', 'ls', 'mkdir', 'rm', 'cp', 'mv',
      'export', 'source', 'alias', 'unalias', 'exit',
      // Shell variables
      'PATH', 'HOME', 'USER', 'SHELL', 'PWD', 'RANDOM', 'HOSTNAME',
      // Control operators
      'if', 'then', 'else', 'elif', 'fi', 'case', 'esac',
      'for', 'while', 'until', 'do', 'done',
      // Test operators
      '-eq', '-ne', '-lt', '-le', '-gt', '-ge', '-z', '-n',
      '-f', '-d', '-r', '-w', '-x'
    },
    'groovy': {
      // Built-in methods
      'println', 'print', 'printf', 'sprintf', 'assert',
      // Collection operations
      'each', 'collect', 'find', 'findAll', 'any', 'every',
      'inject', 'sort', 'reverse', 'join',
      // String methods
      'toList', 'toSet', 'tokenize', 'capitalize', 'padLeft',
      'padRight', 'size',
      // File operations
      'eachFile', 'eachDir', 'eachFileRecurse', 'mkdir',
      'delete', 'getText', 'writeText',
      // Closures
      'call', 'curry', 'memoize', 'compose',
      // Type conversion
      'asType', 'toInteger', 'toLong', 'toFloat', 'toDouble',
      // XML/JSON
      'parseText', 'toString', 'toXML', 'toJSON'
    },
    'elm': {
      // Core functions
      'Debug.log', 'Debug.toString', 'Maybe.map', 'Maybe.withDefault',
      'Result.map', 'Result.withDefault',
      // List operations
      'map', 'filter', 'foldl', 'foldr', 'sort',
      // String operations
      'length', 'reverse', 'concat',
      'split', 'join', 'trim',
      // Common types
      'Int', 'Float', 'String', 'Bool', 'Maybe', 'Result',
      'List', 'Array', 'Tuple', 'Dict', 'Set',
      // HTML functions
      'Html.div', 'Html.button', 'Html.input', 'Html.text',
      'Html.span', 'Html.p', 'Html.h1', 'Html.h2'
    },
  };

  final String source;
  final String detectedLanguage;
  final StringScanner _scanner;
  final List<HighlightSpan> _spans = [];

  UniversalSyntaxHighlighter(this.source)
      : detectedLanguage = _detectLanguage(source),
        _scanner = StringScanner(source) {
    _processSource();
  }

  static String _detectLanguage(String code) {
    for (var entry in languagePatterns.entries) {
      if (entry.value.hasMatch(code)) {
        return entry.key;
      }
    }
    return 'text';
  }

  List<HighlightSpan> get spans => _spans;

  void _processSource() {
    while (!_scanner.isDone) {
      var match = false;
      final startPosition = _scanner.position;

      match = _scanComments() ||
          _scanStrings() ||
          _scanNumbers() ||
          _scanKeywords() ||
          _scanBuiltins() ||
          _scanTags() ||
          _scanMethods() ||
          _scanVariables() ||
          _scanOperators() ||
          _scanPunctuation();

      if (!match || _scanner.position == startPosition) {
        _addSpan('base', _scanner.position, _scanner.position + 1);
        _scanner.position++;
      }

      if (_scanner.position >= source.length) {
        break;
      }
    }

    _normalizeSpans();
  }

  bool _scanKeywords() {
    final languageKeywords = keywords[detectedLanguage] ?? {};
    if (languageKeywords.isEmpty) return false;

    final keywordPattern = RegExp('\\b(${languageKeywords.join('|')})\\b');
    if (_scanner.scan(keywordPattern)) {
      _addSpan('keyword', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanBuiltins() {
    final languageBuiltins = builtins[detectedLanguage] ?? {};
    if (languageBuiltins.isEmpty) return false;

    final builtinPattern = RegExp('\\b(${languageBuiltins.join('|')})\\b');
    if (_scanner.scan(builtinPattern)) {
      _addSpan('class', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  void _addSpan(String type, int start, int end) {
    if (start < end && end <= source.length) {
      _spans.add(HighlightSpan(type: type, start: start, end: end));
    }
  }

  bool _scanComments() {
    // Single line comments
    if (_scanner.scan(RegExp(r'//.*?(?:\n|$)|#.*?(?:\n|$)'))) {
      _addSpan('comment', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }

    // Multi-line comments
    if (_scanner.scan(RegExp(r'/\*.*?\*/|<!--.*?-->', dotAll: true))) {
      _addSpan('comment', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanStrings() {
    final patterns = [
      r'"""[\s\S]*?"""',      // Triple double quotes
      r'"[^"\\]*(?:\\.[^"\\]*)*"', // Double quotes
      r"'[^'\\]*(?:\\.[^'\\]*)*'", // Single quotes
      r'`[^`\\]*(?:\\.[^`\\]*)*`', // Template literals
    ];

    for (final pattern in patterns) {
      if (_scanner.scan(RegExp(pattern))) {
        _addSpan('string', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
        return true;
      }
    }
    return false;
  }

  bool _scanNumbers() {
    if (_scanner.scan(RegExp(r'\b\d*\.?\d+([eE][+-]?\d+)?\b|0x[0-9a-fA-F]+'))) {
      _addSpan('number', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanTags() {
    if (_scanner.scan(RegExp(r'</?[a-zA-Z][a-zA-Z0-9-]*(?:\s+[^>]*)?/?>'))) {
      _addSpan('tag', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanMethods() {
    if (_scanner.scan(RegExp(r'\b[a-zA-Z_]\w*(?=\s*\()'))) {
      _addSpan('method', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanVariables() {
    if (_scanner.scan(RegExp(r'\b[a-zA-Z_]\w*\b'))) {
      final text = _scanner.lastMatch![0]!;
      final type = text[0].toUpperCase() == text[0] ? 'class' : 'variable';
      _addSpan(type, _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanOperators() {
    if (_scanner.scan(RegExp(r'[+\-*/%=&|^~<>!?:]+'))) {
      _addSpan('operator', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  bool _scanPunctuation() {
    if (_scanner.scan(RegExp(r'[.,;()[\]{}]'))) {
      _addSpan('punctuation', _scanner.lastMatch!.start, _scanner.lastMatch!.end);
      return true;
    }
    return false;
  }

  void _normalizeSpans() {
    if (_spans.isEmpty) return;

    _spans.sort((a, b) => a.start.compareTo(b.start));

    _spans.removeWhere((span) =>
    span.start >= span.end ||
        span.start < 0 ||
        span.end > source.length);

    for (var i = _spans.length - 2; i >= 0; i--) {
      if (_spans[i].end > _spans[i + 1].start) {
        _spans[i] = HighlightSpan(
          type: _spans[i].type,
          start: _spans[i].start,
          end: _spans[i + 1].start,
        );
      }
    }
  }
}